default_task: &default_task
  account: '&ACCOUNT;'
  attrs:
    cycledefs: forecast
    maxtries: '1'
  envars: &default_vars
    GLOBAL_VAR_DEFNS_FP: '&GLOBAL_VAR_DEFNS_FP;'
    USHdir: '&USHdir;'
    PDY:
      cyclestr:
        value: "@Y@m@d"
    cyc:
      cyclestr:
        value: "@H"
    subcyc:
      cyclestr:
        value: "@M"
    LOGDIR:
      cyclestr:
        value: "&LOGDIR;"
    ENSMEM_INDX: '#mem#'
  native: '{{ platform.SCHED_NATIVE_CMD }}'
  partition: '{{ "&PARTITION_DEFAULT;" if platform.get("PARTITION_DEFAULT") else "None" }}'
  queue: '&QUEUE_DEFAULT;'

task_get_extrn_ics:
  <<: *default_task
  command: '&LOAD_MODULES_RUN_TASK; "get_extrn_ics" "&JOBSdir;/JREGIONAL_GET_EXTRN_MDL_FILES"'
  attrs:
    cycledefs: forecast
    maxtries: '2'
  envars:
    <<: *default_vars
    ICS_OR_LBCS: ICS
    nprocs: !int '{{ task_get_extrn_ics.execution.tasks_per_node }}'
  join:
    cyclestr:
      value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
  memory: 4G
  native: '{{ platform.SCHED_NATIVE_CMD_HPSS if platform.get("SCHED_NATIVE_CMD_HPSS") else platform.SCHED_NATIVE_CMD}}'
  partition: '{{ "&PARTITION_HPSS;" if platform.get("PARTITION_HPSS") else "None" }}'
  cores: !int '{{ task_get_extrn_ics.execution.tasks_per_node }}'
  queue: '&QUEUE_HPSS;'
  walltime: '{{ task_get_extrn_ics.execution.walltime }}'
  dependency:
    or:
      and:
        streq:
          left: do_real_time
          right: '{% if workflow.DO_REAL_TIME %}do_real_time{% endif %}'
        datadep_gfs:
          attrs:
            age: "00:00:05"
          value:
            cyclestr:
              attrs:
                offset: "-{{ workflow.INCR_CYCL_FREQ }}:00:00"
              value: "&COMINgfs;/gfs.@Y@m@d/@H/atmos"
      streq:
        left: retro
        right: '{% if not workflow.DO_REAL_TIME %}retro{% endif %}'

task_get_extrn_lbcs:
  <<: *default_task
  command: '&LOAD_MODULES_RUN_TASK; "get_extrn_lbcs" "&JOBSdir;/JREGIONAL_GET_EXTRN_MDL_FILES"'
  attrs:
    cycledefs: forecast
    maxtries: '2'
  envars:
    <<: *default_vars
    ICS_OR_LBCS: LBCS
    nprocs: !int '{{ task_get_extrn_lbcs.execution.tasks_per_node }}'
  join:
    cyclestr:
      value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
  memory: 4G
  cores: !int '{{ task_get_extrn_lbcs.execution.tasks_per_node }}'
  native: '{{ platform.SCHED_NATIVE_CMD_HPSS if platform.get("SCHED_NATIVE_CMD_HPSS") else platform.SCHED_NATIVE_CMD }}'
  partition: '{{ "&PARTITION_HPSS;" if platform.get("PARTITION_HPSS") else "None" }}'
  queue: '&QUEUE_HPSS;'
  walltime: '{{ task_get_extrn_lbcs.execution.walltime }}'
  dependency:
    or:
      and:
        streq:
          left: do_real_time
          right: '{% if workflow.DO_REAL_TIME %}do_real_time{% endif %}'
        datadep_gfs:
          attrs:
            age: 00:00:00:05
          value:
            cyclestr:
              attrs:
                offset: "-{{ workflow.INCR_CYCL_FREQ }}:00:00"
              value: '&COMINgfs;/gfs.@Y@m@d/@H/atmos'
      streq:
        left: retro
        right: '{% if not workflow.DO_REAL_TIME %}retro{% endif %}'

metatask_run_ensemble:
  var:
    mem: '{% if global.DO_ENSEMBLE %}{%- for m in range(1, global.NUM_ENS_MEMBERS+1) -%}{{ "%03d "%m }}{%- endfor -%} {% else %}{{ "000"|string }}{% endif %}'
  task_make_ics_mem#mem#:
    <<: *default_task
    command: '&LOAD_MODULES_RUN_TASK; "make_ics" "&JOBSdir;/JREGIONAL_MAKE_ICS"'
    envars:
      <<: *default_vars
      SLASH_ENSMEM_SUBDIR: '&SLASH_ENSMEM_SUBDIR;'
      nprocs: !int '{{ task_make_ics.chgres_cube.execution.batchargs.nodes * task_make_ics.chgres_cube.execution.batchargs.tasks_per_node }}'
    join:
      cyclestr:
        value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
    nodes: '{{ task_make_ics.chgres_cube.execution.batchargs.nodes }}:ppn={{ task_make_ics.chgres_cube.execution.batchargs.tasks_per_node }}'
    walltime: '{{ task_make_ics.chgres_cube.execution.batchargs.walltime }}'
    dependency:
      and: &make_ics_deps
        taskdep_get_extrn:
          attrs:
            task: get_extrn_ics
        or_grid:
          datadep_grid:
            attrs:
              age: 00:00:00:05
            value: '{{ task_make_grid.GRID_DIR }}/make_grid_task_complete.txt'
          streq:
            left: staged_grid
            right: '{% if not rocoto.get("tasks", {}).get("task_make_grid") %}staged_grid{% endif %}'
        or_orog:
          datadep_orog:
            attrs:
              age: 00:00:00:05
            value: '{{ task_make_orog.rundir }}/make_orog_task_complete.txt'
          streq:
            left: staged_orog
            right: '{% if not rocoto.get("tasks", {}).get("task_make_orog") %}staged_orog{% endif %}'
        or_sfc_climo:
          datadep_sfc_climo:
            attrs:
              age: 00:00:00:05
            value: '{{ task_make_sfc_climo.sfc_climo_gen.rundir }}/make_sfc_climo_task_complete.txt'
          streq:
            left: staged_sfc_climo
            right: '{% if not rocoto.get("tasks", {}).get("task_make_sfc_climo") %}staged_sfc_climo{% endif %}'

  task_make_lbcs_mem#mem#:
    <<: *default_task
    command: '&LOAD_MODULES_RUN_TASK; "make_lbcs" "&JOBSdir;/JREGIONAL_MAKE_LBCS"'
    envars:
      <<: *default_vars
      SLASH_ENSMEM_SUBDIR: '&SLASH_ENSMEM_SUBDIR;'
      bcgrp: '00'
      bcgrpnum: '1'
      nprocs: !int '{{ task_make_lbcs.chgres_cube.execution.batchargs.nodes * task_make_lbcs.chgres_cube.execution.batchargs.tasks_per_node }}'
    join:
      cyclestr:
        value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
    nodes: '{{ task_make_lbcs.chgres_cube.execution.batchargs.nodes }}:ppn={{ task_make_lbcs.chgres_cube.execution.batchargs.tasks_per_node }}'
    walltime: '{{ task_make_lbcs.chgres_cube.execution.batchargs.walltime }}'
    dependency:
      and:
        <<: *make_ics_deps
        taskdep_get_extrn:
          attrs:
            task: get_extrn_lbcs

  task_run_fcst_mem#mem#:
    <<: *default_task
    command: '&LOAD_MODULES_RUN_TASK; "run_fcst" "&JOBSdir;/JREGIONAL_RUN_FCST"'
    envars:
      <<: *default_vars
      SLASH_ENSMEM_SUBDIR: '&SLASH_ENSMEM_SUBDIR;'
      nprocs: !int '{{ task_run_fcst.PE_MEMBER01 }}'
    join:
      cyclestr:
        value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
    partition: '{{ "&PARTITION_FCST;" if platform.get("PARTITION_FCST") else "None" }}'
    queue: '&QUEUE_FCST;'
    nodes: '{{ task_run_fcst.NNODES_RUN_FCST // 1 }}:ppn={{ task_run_fcst.PPN_RUN_FCST // 1 }}'
    walltime: '{{ task_run_fcst.walltime }}'
    dependency:
      and:
        taskdep_make_ics:
          attrs:
            task: make_ics_mem#mem#
        taskdep_make_lbcs:
          attrs:
            task: make_lbcs_mem#mem#
        or_nexus_emission:
          not:
            taskvalid:
              attrs:
                task: nexus_post_split
          taskdep:
            attrs:
              task: nexus_post_split
        or_fire_emission:
          not:
            taskvalid:
              attrs:
                task: fire_emission
          taskdep:
            attrs:
              task: fire_emission
        or_point_source:
          not:
            taskvalid:
              attrs:
                task: point_source
          taskdep:
            attrs:
              task: point_source
        or_aqm_ics:
          not:
            taskvalid:
              attrs:
                task: aqm_ics
          taskdep:
            attrs:
              task: aqm_ics
        or_aqm_ics_ext:
          not:
            taskvalid:
              attrs:
                task: aqm_ics_ext
          taskdep:
            attrs:
              task: aqm_ics_ext
        or_aqm_lbcs:
          not:
            taskvalid:
              attrs:
                task: aqm_lbcs
          taskdep:
            attrs:
              task: aqm_lbcs
