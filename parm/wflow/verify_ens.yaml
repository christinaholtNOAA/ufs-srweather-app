default_task_verify_ens: &default_task_verify_ens
  account: '&ACCOUNT;'
  attrs:
    cycledefs: forecast
    maxtries: '2'
  envars: &default_vars
    GLOBAL_VAR_DEFNS_FP: '&GLOBAL_VAR_DEFNS_FP;'
    USHdir: '&USHdir;'
    PDY:
      cyclestr:
        value:  '@Y@m@d'
    cyc:
      cyclestr:
        value:  "@H"
    subcyc:
      cyclestr:
        value:  "@M"
    LOGDIR:
      cyclestr:
        value:  "&LOGDIR;"
    nprocs: '{{ parent.nnodes * parent.ppn }}'
  join:
    cyclestr:
      value:  '&LOGDIR;/{{ jobname }}_@Y@m@d@H&LOGEXT;'
  memory: '{{ "2G" if user.MACHINE not in ["WCOSS2", "NOAACLOUD"] }}'
  native: '{{ platform.SCHED_NATIVE_CMD }}'
  cores: !int '{{ verification.execution.cores }}'
  partition: '{{ "&PARTITION_DEFAULT;" if platform.get("PARTITION_DEFAULT") else "" }}'
  queue: '&QUEUE_DEFAULT;'

metatask_GenEnsProd_EnsembleStat_CCPA:
  var:
    ACCUM_HH: '{% for ah in verification.VX_APCP_ACCUMS_HRS %}{% if workflow.FCST_LEN_HRS >= ah %}{{ "%02d " % ah }}{% endif %}{% endfor %}'
  task_run_MET_GenEnsProd_vx_APCP#ACCUM_HH#h: &task_GenEnsProd_CCPA
    <<: *default_task_verify_ens
    command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GENENSPROD_OR_ENSEMBLESTAT"'
    envars: &envars_GenEnsProd_CCPA
      <<: *default_vars
      ACCUM_HH: '#ACCUM_HH#'
      OBS_DIR: '&CCPA_OBS_DIR;'
      VAR: APCP
      METPLUSTOOLNAME: 'GENENSPROD'
      OBTYPE: 'CCPA'
      FCST_LEVEL: 'A#ACCUM_HH#'
      FCST_THRESH: 'all'
    walltime: "{{ verification.execution.ensemble.genensprod.default.walltime }}"
    dependency:
      and:
        # The PcpCombine task for obs must be complete because this GenEnsProd
        # task checks to see the forecast hours for which obs are available before
        # processing the forecast for those hours.
        taskdep_pcpcombine_obs:
          attrs:
            task: run_MET_PcpCombine_obs_APCP#ACCUM_HH#h
        metataskdep_pcpcombine_fcst:
          attrs:
            metatask: PcpCombine_fcst_APCP#ACCUM_HH#h_all_mems
  task_run_MET_EnsembleStat_vx_APCP#ACCUM_HH#h:
    <<: *task_GenEnsProd_CCPA
    envars:
      <<: *envars_GenEnsProd_CCPA
      METPLUSTOOLNAME: 'ENSEMBLESTAT'
      FCST_THRESH: 'none'
    dependency:
      taskdep_genensprod:
        attrs:
          task: run_MET_GenEnsProd_vx_APCP#ACCUM_HH#h

metatask_GenEnsProd_EnsembleStat_NOHRSC:
  var:
    ACCUM_HH: '{% for ah in verification.VX_ASNOW_ACCUMS_HRS %}{% if workflow.FCST_LEN_HRS >= ah %}{{ "%02d " % ah }}{% endif %}{% endfor %}'
  task_run_MET_GenEnsProd_vx_ASNOW#ACCUM_HH#h: &task_GenEnsProd_NOHRSC
    <<: *default_task_verify_ens
    command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GENENSPROD_OR_ENSEMBLESTAT"'
    envars: &envars_GenEnsProd_NOHRSC
      <<: *default_vars
      ACCUM_HH: '#ACCUM_HH#'
      OBS_DIR: '&NOHRSC_OBS_DIR;'
      VAR: ASNOW
      METPLUSTOOLNAME: 'GENENSPROD'
      OBTYPE: 'NOHRSC'
      FCST_LEVEL: 'A#ACCUM_HH#'
      FCST_THRESH: 'all'
    walltime: "{{ verification.execution.ensemble.genensprod.default.walltime }}"
    dependency:
      and:
        # The PcpCombine task for obs must be complete because this GenEnsProd
        # task checks to see the forecast hours for which obs are available before
        # processing the forecast for those hours.
        metataskdep_pcpcombine_fcst:
          attrs:
            metatask: PcpCombine_fcst_ASNOW#ACCUM_HH#h_all_mems
  task_run_MET_EnsembleStat_vx_ASNOW#ACCUM_HH#h:
    <<: *task_GenEnsProd_NOHRSC
    envars:
      <<: *envars_GenEnsProd_NOHRSC
      METPLUSTOOLNAME: 'ENSEMBLESTAT'
      FCST_THRESH: 'none'
    dependency:
      and:
        taskdep:
          attrs:
            task: get_obs_nohrsc
        taskdep_genensprod:
          attrs:
            task: run_MET_GenEnsProd_vx_ASNOW#ACCUM_HH#h

metatask_GenEnsProd_EnsembleStat_MRMS:
  var:
    VAR: '{% for var in verification.VX_FIELDS %}{% if var in ["REFC", "RETOP"] %}{{ "%s " % var }}{% endif %}{% endfor %}'
  task_run_MET_GenEnsProd_vx_#VAR#: &task_GenEnsProd_MRMS
    <<: *default_task_verify_ens
    command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GENENSPROD_OR_ENSEMBLESTAT"'
    envars: &envars_GenEnsProd_MRMS
      <<: *default_vars
      ACCUM_HH: '01'
      OBS_DIR: '&MRMS_OBS_DIR;'
      VAR: '#VAR#'
      METPLUSTOOLNAME: 'GENENSPROD'
      OBTYPE: 'MRMS'
      FCST_LEVEL: 'L0'
      FCST_THRESH: 'all'
    walltime: "{{ verification.execution.ensemble.genensprod.default.walltime }}"
    dependency:
      and:
        metataskdep_check_post_output: &check_post_output
          attrs:
            metatask: check_post_output_all_mems
  task_run_MET_EnsembleStat_vx_#VAR#:
    <<: *task_GenEnsProd_MRMS
    envars:
      <<: *envars_GenEnsProd_MRMS
      METPLUSTOOLNAME: 'ENSEMBLESTAT'
      FCST_LEVEL: 'L0'
      FCST_THRESH: 'none'
    dependency:
      and:
        taskdep_get_obs_mrms:
          attrs:
            task: get_obs_mrms
        taskdep_genensprod:
          attrs:
            task: run_MET_GenEnsProd_vx_#VAR#

metatask_GenEnsProd_EnsembleStat_NDAS:
  var:
    VAR: '{% for var in verification.VX_FIELDS %}{% if var in ["ADPSFC", "ADPUPA"] %}{{ "%s " % var }}{% endif %}{% endfor %}'
  task_run_MET_GenEnsProd_vx_#VAR#: &task_GenEnsProd_NDAS
    <<: *default_task_verify_ens
    command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GENENSPROD_OR_ENSEMBLESTAT"'
    envars: &envars_GenEnsProd_NDAS
      <<: *default_vars
      OBS_DIR: '&NDAS_OBS_DIR;'
      VAR: '#VAR#'
      METPLUSTOOLNAME: 'GENENSPROD'
      OBTYPE: 'NDAS'
      ACCUM_HH: '01'
      FCST_LEVEL: 'all'
      FCST_THRESH: 'all'
    walltime: "{{ verification.execution.ensemble.ndas.walltime }}"
    dependency:
      and:
        # The Pb2nc task (which is run only for obs) must be complete because
        # this GenEnsProd task checks to see the forecast hours for which obs
        # are available before processing the forecast for those hours.
        taskdep_pb2nc:
          attrs:
            task: run_MET_Pb2nc_obs
        metataskdep_check_post_output:
          <<: *check_post_output
  task_run_MET_EnsembleStat_vx_#VAR#:
    <<: *task_GenEnsProd_NDAS
    envars:
      <<: *envars_GenEnsProd_NDAS
      METPLUSTOOLNAME: 'ENSEMBLESTAT'
    walltime: "{{ verification.execution.ensemble.ensemblestat.walltime }}"
    dependency:
      taskdep_genensprod:
        attrs:
          task: run_MET_GenEnsProd_vx_#VAR#

metatask_GridStat_CCPA_ensmeanprob_all_accums:
  var:
    stat: MEAN PROB
    statlc: mean prob
  metatask_GridStat_CCPA_ens#statlc#_all_accums:
    var:
      ACCUM_HH: '{% for ah in verification.VX_APCP_ACCUMS_HRS %}{% if workflow.FCST_LEN_HRS >= ah %}{{ "%02d " % ah }}{% endif %}{% endfor %}'
    task_run_MET_GridStat_vx_ens#statlc#_APCP#ACCUM_HH#h:
      <<: *default_task_verify_ens
      command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GRIDSTAT_OR_POINTSTAT_VX_ENS#stat#"'
      envars:
        <<: *default_vars
        OBS_DIR: '&CCPA_OBS_DIR;'
        VAR: APCP
        METPLUSTOOLNAME: 'GRIDSTAT'
        OBTYPE: 'CCPA'
        ACCUM_HH: '#ACCUM_HH#'
        FCST_LEVEL: 'A#ACCUM_HH#'
        FCST_THRESH: 'all'
      walltime: "{{ verification.execution.ensemble.gridstat.walltime }}"
      dependency:
        taskdep:
          attrs:
            task: run_MET_GenEnsProd_vx_APCP#ACCUM_HH#h

metatask_GridStat_NOHRSC_ensmeanprob_all_accums:
  var:
    stat: MEAN PROB
    statlc: mean prob
  metatask_GridStat_NOHRSC_ens#statlc#_all_accums:
    var:
      ACCUM_HH: '{% for ah in verification.VX_ASNOW_ACCUMS_HRS %}{% if workflow.FCST_LEN_HRS >= ah %}{{ "%02d " % ah }}{% endif %}{% endfor %}'
    task_run_MET_GridStat_vx_ens#statlc#_ASNOW#ACCUM_HH#h:
      <<: *default_task_verify_ens
      command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GRIDSTAT_OR_POINTSTAT_VX_ENS#stat#"'
      envars:
        <<: *default_vars
        OBS_DIR: '&NOHRSC_OBS_DIR;'
        VAR: ASNOW
        METPLUSTOOLNAME: 'GRIDSTAT'
        OBTYPE: 'NOHRSC'
        ACCUM_HH: '#ACCUM_HH#'
        FCST_LEVEL: 'A#ACCUM_HH#'
        FCST_THRESH: 'all'
      walltime: "{{ verification.execution.ensemble.gridstat.walltime }}"
      dependency:
        taskdep:
          attrs:
            task: run_MET_GenEnsProd_vx_ASNOW#ACCUM_HH#h

metatask_GridStat_MRMS_ensprob:
  var:
    VAR: '{% for var in verification.VX_FIELDS %}{% if var in ["REFC", "RETOP"] %}{{ "%s " % var }}{% endif %}{% endfor %}'
  task_run_MET_GridStat_vx_ensprob_#VAR#:
    <<: *default_task_verify_ens
    command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GRIDSTAT_OR_POINTSTAT_VX_ENSPROB"'
    envars:
      <<: *default_vars
      ACCUM_HH: '01'
      OBS_DIR: '&MRMS_OBS_DIR;'
      VAR: '#VAR#'
      METPLUSTOOLNAME: 'GRIDSTAT'
      OBTYPE: 'MRMS'
      FCST_LEVEL: 'L0'
      FCST_THRESH: 'all'
    walltime: "{{ verification.execution.ensemble.gridstat.walltime }}"
    dependency:
      taskdep:
        attrs:
          task: run_MET_GenEnsProd_vx_#VAR#

metatask_PointStat_NDAS_ensmeanprob:
  var:
    stat: MEAN PROB
    statlc: mean prob
  metatask_PointStat_NDAS_ens#statlc#:
    var:
      VAR: '{% for var in verification.VX_FIELDS %}{% if var in ["ADPSFC", "ADPUPA"] %}{{ "%s " % var }}{% endif %}{% endfor %}'
    task_run_MET_PointStat_vx_ens#statlc#_#VAR#:
      <<: *default_task_verify_ens
      command: '&LOAD_MODULES_RUN_TASK; "run_vx" "&JOBSdir;/JREGIONAL_RUN_MET_GRIDSTAT_OR_POINTSTAT_VX_ENS#stat#"'
      envars:
        <<: *default_vars
        OBS_DIR: '&NDAS_OBS_DIR;'
        VAR: '#VAR#'
        METPLUSTOOLNAME: 'POINTSTAT'
        OBTYPE: 'NDAS'
        ACCUM_HH: '01'
        FCST_LEVEL: 'all'
        FCST_THRESH: 'all'
      walltime: "{{ verification.execution.ensemble.pointstat.walltime }}"
      dependency:
        taskdep:
          attrs:
            task: run_MET_GenEnsProd_vx_#VAR#
